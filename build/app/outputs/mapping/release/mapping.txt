com.example.itzmeanjan.sensorz.MainActivity -> com.example.itzmeanjan.sensorz.MainActivity:
    java.lang.String methodChannelName -> a
    java.lang.String eventChannelName -> b
    io.flutter.plugin.common.MethodChannel methodChannel -> c
    android.hardware.SensorManager sensorManager -> d
    void onCreate(android.os.Bundle) -> onCreate
    void <init>() -> <init>
com.example.itzmeanjan.sensorz.MainActivity$onCreate$1 -> com.example.itzmeanjan.sensorz.MainActivity$a:
    com.example.itzmeanjan.sensorz.MainActivity this$0 -> a
    void <init>(com.example.itzmeanjan.sensorz.MainActivity) -> <init>
io.flutter.app.FlutterActivity -> io.flutter.app.a:
    io.flutter.app.FlutterActivityDelegate delegate -> a
    io.flutter.app.FlutterActivityEvents eventDelegate -> b
    io.flutter.view.FlutterView$Provider viewProvider -> c
    io.flutter.plugin.common.PluginRegistry pluginRegistry -> d
    void <init>() -> <init>
    io.flutter.view.FlutterView getFlutterView() -> a
    io.flutter.view.FlutterView createFlutterView(android.content.Context) -> a
    io.flutter.view.FlutterNativeView createFlutterNativeView() -> b
    boolean retainFlutterNativeView() -> c
    boolean hasPlugin(java.lang.String) -> a
    io.flutter.plugin.common.PluginRegistry$Registrar registrarFor(java.lang.String) -> b
    void onCreate(android.os.Bundle) -> onCreate
    void onStart() -> onStart
    void onResume() -> onResume
    void onDestroy() -> onDestroy
    void onBackPressed() -> onBackPressed
    void onStop() -> onStop
    void onPause() -> onPause
    void onPostResume() -> onPostResume
    void onRequestPermissionsResult(int,java.lang.String[],int[]) -> onRequestPermissionsResult
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void onNewIntent(android.content.Intent) -> onNewIntent
    void onUserLeaveHint() -> onUserLeaveHint
    void onTrimMemory(int) -> onTrimMemory
    void onLowMemory() -> onLowMemory
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
io.flutter.app.FlutterActivityDelegate -> io.flutter.app.b:
    android.view.WindowManager$LayoutParams matchParent -> a
    android.app.Activity activity -> b
    io.flutter.app.FlutterActivityDelegate$ViewFactory viewFactory -> c
    io.flutter.view.FlutterView flutterView -> d
    android.view.View launchView -> e
    void <init>(android.app.Activity,io.flutter.app.FlutterActivityDelegate$ViewFactory) -> <init>
    io.flutter.view.FlutterView getFlutterView() -> a
    boolean hasPlugin(java.lang.String) -> a
    io.flutter.plugin.common.PluginRegistry$Registrar registrarFor(java.lang.String) -> b
    boolean onRequestPermissionsResult(int,java.lang.String[],int[]) -> a
    boolean onActivityResult(int,int,android.content.Intent) -> a
    void onCreate(android.os.Bundle) -> a
    void onNewIntent(android.content.Intent) -> a
    boolean isDebuggable() -> j
    void onPause() -> b
    void onStart() -> c
    void onResume() -> d
    void onStop() -> e
    void onPostResume() -> f
    void onDestroy() -> g
    boolean onBackPressed() -> h
    void onUserLeaveHint() -> i
    void onTrimMemory(int) -> onTrimMemory
    void onLowMemory() -> onLowMemory
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    java.lang.String[] getArgsFromIntent(android.content.Intent) -> b
    boolean loadIntent(android.content.Intent) -> c
    android.view.View createLaunchView() -> k
    android.graphics.drawable.Drawable getLaunchScreenDrawableFromActivityTheme() -> l
    java.lang.Boolean showSplashScreenUntilFirstFrame() -> m
    void addLaunchView() -> n
    void <clinit>() -> <clinit>
io.flutter.app.FlutterActivityDelegate$1 -> io.flutter.app.b$1:
    io.flutter.app.FlutterActivityDelegate this$0 -> a
    void <init>(io.flutter.app.FlutterActivityDelegate) -> <init>
io.flutter.app.FlutterActivityDelegate$ViewFactory -> io.flutter.app.b$a:
    io.flutter.view.FlutterView createFlutterView(android.content.Context) -> a
    io.flutter.view.FlutterNativeView createFlutterNativeView() -> b
    boolean retainFlutterNativeView() -> c
io.flutter.app.FlutterActivityEvents -> io.flutter.app.c:
    void onCreate(android.os.Bundle) -> a
    void onNewIntent(android.content.Intent) -> a
    void onPause() -> b
    void onStart() -> c
    void onResume() -> d
    void onPostResume() -> f
    void onDestroy() -> g
    void onStop() -> e
    boolean onBackPressed() -> h
    void onUserLeaveHint() -> i
io.flutter.app.FlutterApplication -> io.flutter.app.FlutterApplication:
    android.app.Activity mCurrentActivity -> a
    void <init>() -> <init>
    void onCreate() -> onCreate
    android.app.Activity getCurrentActivity() -> a
    void setCurrentActivity(android.app.Activity) -> a
io.flutter.app.FlutterPluginRegistry -> io.flutter.app.d:
    android.app.Activity mActivity -> a
    android.content.Context mAppContext -> b
    io.flutter.view.FlutterNativeView mNativeView -> c
    io.flutter.view.FlutterView mFlutterView -> d
    io.flutter.plugin.platform.PlatformViewsController mPlatformViewsController -> e
    java.util.Map mPluginMap -> f
    java.util.List mRequestPermissionsResultListeners -> g
    java.util.List mActivityResultListeners -> h
    java.util.List mNewIntentListeners -> i
    java.util.List mUserLeaveHintListeners -> j
    java.util.List mViewDestroyListeners -> k
    void <init>(io.flutter.view.FlutterNativeView,android.content.Context) -> <init>
    boolean hasPlugin(java.lang.String) -> a
    io.flutter.plugin.common.PluginRegistry$Registrar registrarFor(java.lang.String) -> b
    void attach(io.flutter.view.FlutterView,android.app.Activity) -> a
    void detach() -> a
    boolean onRequestPermissionsResult(int,java.lang.String[],int[]) -> a
    boolean onActivityResult(int,int,android.content.Intent) -> a
    boolean onNewIntent(android.content.Intent) -> a
    void onUserLeaveHint() -> b
    boolean onViewDestroy(io.flutter.view.FlutterNativeView) -> a
    void destroy() -> c
io.flutter.app.FlutterPluginRegistry$FlutterRegistrar -> io.flutter.app.d$a:
    java.lang.String pluginKey -> b
    io.flutter.app.FlutterPluginRegistry this$0 -> a
    void <init>(io.flutter.app.FlutterPluginRegistry,java.lang.String) -> <init>
io.flutter.plugin.common.ActivityLifecycleListener -> io.flutter.a.a.a:
    void onPostResume() -> a
io.flutter.plugin.common.BasicMessageChannel -> io.flutter.a.a.b:
    io.flutter.plugin.common.BinaryMessenger messenger -> b
    java.lang.String name -> c
    io.flutter.plugin.common.MessageCodec codec -> d
    boolean $assertionsDisabled -> a
    void <init>(io.flutter.plugin.common.BinaryMessenger,java.lang.String,io.flutter.plugin.common.MessageCodec) -> <init>
    void send(java.lang.Object) -> a
    void send(java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply) -> a
    void setMessageHandler(io.flutter.plugin.common.BasicMessageChannel$MessageHandler) -> a
    void <clinit>() -> <clinit>
io.flutter.plugin.common.BasicMessageChannel$1 -> io.flutter.a.a.b$1:
io.flutter.plugin.common.BasicMessageChannel$IncomingMessageHandler -> io.flutter.a.a.b$a:
    io.flutter.plugin.common.BasicMessageChannel$MessageHandler handler -> b
    io.flutter.plugin.common.BasicMessageChannel this$0 -> a
    void <init>(io.flutter.plugin.common.BasicMessageChannel,io.flutter.plugin.common.BasicMessageChannel$MessageHandler) -> <init>
    void <init>(io.flutter.plugin.common.BasicMessageChannel,io.flutter.plugin.common.BasicMessageChannel$MessageHandler,io.flutter.plugin.common.BasicMessageChannel$1) -> <init>
io.flutter.plugin.common.BasicMessageChannel$IncomingReplyHandler -> io.flutter.a.a.b$b:
    io.flutter.plugin.common.BasicMessageChannel$Reply callback -> b
    io.flutter.plugin.common.BasicMessageChannel this$0 -> a
    void <init>(io.flutter.plugin.common.BasicMessageChannel,io.flutter.plugin.common.BasicMessageChannel$Reply) -> <init>
    void <init>(io.flutter.plugin.common.BasicMessageChannel,io.flutter.plugin.common.BasicMessageChannel$Reply,io.flutter.plugin.common.BasicMessageChannel$1) -> <init>
io.flutter.plugin.common.BasicMessageChannel$MessageHandler -> io.flutter.a.a.b$c:
io.flutter.plugin.common.BasicMessageChannel$Reply -> io.flutter.a.a.b$d:
io.flutter.plugin.common.BinaryMessenger -> io.flutter.a.a.c:
    void send(java.lang.String,java.nio.ByteBuffer,io.flutter.plugin.common.BinaryMessenger$BinaryReply) -> a
    void setMessageHandler(java.lang.String,io.flutter.plugin.common.BinaryMessenger$BinaryMessageHandler) -> a
io.flutter.plugin.common.BinaryMessenger$BinaryMessageHandler -> io.flutter.a.a.c$a:
io.flutter.plugin.common.BinaryMessenger$BinaryReply -> io.flutter.a.a.c$b:
io.flutter.plugin.common.JSONMessageCodec -> io.flutter.a.a.d:
    io.flutter.plugin.common.JSONMessageCodec INSTANCE -> a
    void <init>() -> <init>
    java.nio.ByteBuffer encodeMessage(java.lang.Object) -> a
    void <clinit>() -> <clinit>
io.flutter.plugin.common.JSONMethodCodec -> io.flutter.a.a.e:
    io.flutter.plugin.common.JSONMethodCodec INSTANCE -> a
    void <init>() -> <init>
    java.nio.ByteBuffer encodeMethodCall(io.flutter.plugin.common.MethodCall) -> a
    void <clinit>() -> <clinit>
io.flutter.plugin.common.JSONUtil -> io.flutter.a.a.f:
    java.lang.Object wrap(java.lang.Object) -> a
io.flutter.plugin.common.MessageCodec -> io.flutter.a.a.g:
    java.nio.ByteBuffer encodeMessage(java.lang.Object) -> a
io.flutter.plugin.common.MethodCall -> io.flutter.a.a.h:
    java.lang.String method -> a
    java.lang.Object arguments -> b
    boolean $assertionsDisabled -> c
    void <init>(java.lang.String,java.lang.Object) -> <init>
    void <clinit>() -> <clinit>
io.flutter.plugin.common.MethodChannel -> io.flutter.a.a.i:
    io.flutter.plugin.common.BinaryMessenger messenger -> b
    java.lang.String name -> c
    io.flutter.plugin.common.MethodCodec codec -> d
    boolean $assertionsDisabled -> a
    void <init>(io.flutter.plugin.common.BinaryMessenger,java.lang.String) -> <init>
    void <init>(io.flutter.plugin.common.BinaryMessenger,java.lang.String,io.flutter.plugin.common.MethodCodec) -> <init>
    void invokeMethod(java.lang.String,java.lang.Object) -> a
    void invokeMethod(java.lang.String,java.lang.Object,io.flutter.plugin.common.MethodChannel$Result) -> a
    void setMethodCallHandler(io.flutter.plugin.common.MethodChannel$MethodCallHandler) -> a
    void <clinit>() -> <clinit>
io.flutter.plugin.common.MethodChannel$IncomingMethodCallHandler -> io.flutter.a.a.i$a:
    io.flutter.plugin.common.MethodChannel$MethodCallHandler handler -> b
    io.flutter.plugin.common.MethodChannel this$0 -> a
    void <init>(io.flutter.plugin.common.MethodChannel,io.flutter.plugin.common.MethodChannel$MethodCallHandler) -> <init>
io.flutter.plugin.common.MethodChannel$IncomingResultHandler -> io.flutter.a.a.i$b:
    io.flutter.plugin.common.MethodChannel$Result callback -> b
    io.flutter.plugin.common.MethodChannel this$0 -> a
    void <init>(io.flutter.plugin.common.MethodChannel,io.flutter.plugin.common.MethodChannel$Result) -> <init>
io.flutter.plugin.common.MethodChannel$MethodCallHandler -> io.flutter.a.a.i$c:
io.flutter.plugin.common.MethodChannel$Result -> io.flutter.a.a.i$d:
io.flutter.plugin.common.MethodCodec -> io.flutter.a.a.j:
    java.nio.ByteBuffer encodeMethodCall(io.flutter.plugin.common.MethodCall) -> a
io.flutter.plugin.common.PluginRegistry -> io.flutter.a.a.k:
    io.flutter.plugin.common.PluginRegistry$Registrar registrarFor(java.lang.String) -> b
    boolean hasPlugin(java.lang.String) -> a
io.flutter.plugin.common.PluginRegistry$ActivityResultListener -> io.flutter.a.a.k$a:
    boolean onActivityResult(int,int,android.content.Intent) -> a
io.flutter.plugin.common.PluginRegistry$NewIntentListener -> io.flutter.a.a.k$b:
    boolean onNewIntent(android.content.Intent) -> a
io.flutter.plugin.common.PluginRegistry$Registrar -> io.flutter.a.a.k$c:
io.flutter.plugin.common.PluginRegistry$RequestPermissionsResultListener -> io.flutter.a.a.k$d:
    boolean onRequestPermissionsResult(int,java.lang.String[],int[]) -> a
io.flutter.plugin.common.PluginRegistry$UserLeaveHintListener -> io.flutter.a.a.k$e:
    void onUserLeaveHint() -> b
io.flutter.plugin.common.PluginRegistry$ViewDestroyListener -> io.flutter.a.a.k$f:
    boolean onViewDestroy(io.flutter.view.FlutterNativeView) -> a
io.flutter.plugin.common.StandardMessageCodec -> io.flutter.a.a.l:
    io.flutter.plugin.common.StandardMessageCodec INSTANCE -> a
    boolean LITTLE_ENDIAN -> c
    java.nio.charset.Charset UTF8 -> d
    boolean $assertionsDisabled -> b
    void <init>() -> <init>
    java.nio.ByteBuffer encodeMessage(java.lang.Object) -> a
    void writeSize(java.io.ByteArrayOutputStream,int) -> a
    void writeChar(java.io.ByteArrayOutputStream,int) -> b
    void writeInt(java.io.ByteArrayOutputStream,int) -> c
    void writeLong(java.io.ByteArrayOutputStream,long) -> a
    void writeDouble(java.io.ByteArrayOutputStream,double) -> a
    void writeBytes(java.io.ByteArrayOutputStream,byte[]) -> a
    void writeAlignment(java.io.ByteArrayOutputStream,int) -> d
    void writeValue(java.io.ByteArrayOutputStream,java.lang.Object) -> a
    void <clinit>() -> <clinit>
io.flutter.plugin.common.StandardMessageCodec$ExposedByteArrayOutputStream -> io.flutter.a.a.l$a:
    void <init>() -> <init>
    byte[] buffer() -> a
io.flutter.plugin.common.StandardMethodCodec -> io.flutter.a.a.m:
    io.flutter.plugin.common.StandardMethodCodec INSTANCE -> a
    io.flutter.plugin.common.StandardMessageCodec messageCodec -> b
    void <init>(io.flutter.plugin.common.StandardMessageCodec) -> <init>
    java.nio.ByteBuffer encodeMethodCall(io.flutter.plugin.common.MethodCall) -> a
    void <clinit>() -> <clinit>
io.flutter.plugin.common.StringCodec -> io.flutter.a.a.n:
    java.nio.charset.Charset UTF8 -> b
    io.flutter.plugin.common.StringCodec INSTANCE -> a
    void <init>() -> <init>
    java.nio.ByteBuffer encodeMessage(java.lang.String) -> a
    java.nio.ByteBuffer encodeMessage(java.lang.Object) -> a
    void <clinit>() -> <clinit>
io.flutter.plugin.editing.InputConnectionAdaptor -> io.flutter.a.b.a:
    io.flutter.view.FlutterView mFlutterView -> a
    int mClient -> b
    io.flutter.plugin.common.MethodChannel mFlutterChannel -> c
    android.text.Editable mEditable -> d
    int mBatchCount -> e
    android.view.inputmethod.InputMethodManager mImm -> f
    void <init>(io.flutter.view.FlutterView,int,io.flutter.plugin.common.MethodChannel,android.text.Editable) -> <init>
    void updateEditingState() -> a
    android.text.Editable getEditable() -> getEditable
    boolean beginBatchEdit() -> beginBatchEdit
    boolean endBatchEdit() -> endBatchEdit
    boolean commitText(java.lang.CharSequence,int) -> commitText
    boolean deleteSurroundingText(int,int) -> deleteSurroundingText
    boolean setComposingRegion(int,int) -> setComposingRegion
    boolean setComposingText(java.lang.CharSequence,int) -> setComposingText
    boolean setSelection(int,int) -> setSelection
    boolean sendKeyEvent(android.view.KeyEvent) -> sendKeyEvent
    boolean performEditorAction(int) -> performEditorAction
io.flutter.plugin.editing.TextInputPlugin -> io.flutter.a.b.b:
    io.flutter.view.FlutterView mView -> a
    android.view.inputmethod.InputMethodManager mImm -> b
    io.flutter.plugin.common.MethodChannel mFlutterChannel -> c
    int mClient -> d
    org.json.JSONObject mConfiguration -> e
    android.text.Editable mEditable -> f
    void <init>(io.flutter.view.FlutterView) -> <init>
    int inputTypeFromTextInputType(org.json.JSONObject,boolean,boolean,java.lang.String) -> a
    int inputActionFromTextInputAction(java.lang.String) -> a
    android.view.inputmethod.InputConnection createInputConnection(io.flutter.view.FlutterView,android.view.inputmethod.EditorInfo) -> a
io.flutter.plugin.platform.PlatformPlugin -> io.flutter.a.c.a:
    android.app.Activity mActivity -> a
    org.json.JSONObject mCurrentTheme -> b
    int mEnabledOverlays -> c
    void <init>(android.app.Activity) -> <init>
    void updateSystemUiOverlays() -> b
    void setSystemChromeSystemUIOverlayStyle(org.json.JSONObject) -> a
    void onPostResume() -> a
io.flutter.plugin.platform.PlatformView -> io.flutter.a.c.b:
    android.view.View getView() -> a
    void dispose() -> b
io.flutter.plugin.platform.PlatformViewFactory -> io.flutter.a.c.c:
    io.flutter.plugin.platform.PlatformView create(android.content.Context,int,java.lang.Object) -> a
io.flutter.plugin.platform.PlatformViewRegistryImpl -> io.flutter.a.c.d:
    java.util.Map viewFactories -> a
    void <init>() -> <init>
io.flutter.plugin.platform.PlatformViewsController -> io.flutter.a.c.e:
    io.flutter.plugin.platform.PlatformViewRegistryImpl mRegistry -> a
    android.content.Context mContext -> b
    io.flutter.view.TextureRegistry mTextureRegistry -> c
    io.flutter.plugin.common.BinaryMessenger mMessenger -> d
    java.util.HashMap vdControllers -> e
    void <init>() -> <init>
    void attach(android.content.Context,io.flutter.view.TextureRegistry,io.flutter.plugin.common.BinaryMessenger) -> a
    void detach() -> a
    void onFlutterViewDestroyed() -> b
    void flushAllViews() -> c
io.flutter.plugin.platform.SingleViewPresentation -> io.flutter.a.c.f:
    io.flutter.plugin.platform.PlatformViewFactory mViewFactory -> a
    int mViewId -> b
    java.lang.Object mCreateParams -> c
    android.widget.FrameLayout mRootView -> d
    android.widget.FrameLayout mContainer -> e
    io.flutter.plugin.platform.SingleViewPresentation$PresentationState mState -> f
    void onCreate(android.os.Bundle) -> onCreate
    io.flutter.plugin.platform.SingleViewPresentation$PresentationState detachState() -> a
    io.flutter.plugin.platform.PlatformView getView() -> b
io.flutter.plugin.platform.SingleViewPresentation$FakeWindowViewGroup -> io.flutter.a.c.f$a:
    android.graphics.Rect mViewBounds -> a
    android.graphics.Rect mChildRect -> b
    void <init>(android.content.Context) -> <init>
    void onLayout(boolean,int,int,int,int) -> onLayout
    void onMeasure(int,int) -> onMeasure
    int atMost(int) -> a
io.flutter.plugin.platform.SingleViewPresentation$PresentationContext -> io.flutter.a.c.f$b:
    android.view.WindowManager mWindowManager -> a
    io.flutter.plugin.platform.SingleViewPresentation$WindowManagerHandler mWindowManagerHandler -> b
    void <init>(android.content.Context,io.flutter.plugin.platform.SingleViewPresentation$WindowManagerHandler) -> <init>
    java.lang.Object getSystemService(java.lang.String) -> getSystemService
    android.view.WindowManager getWindowManager() -> a
io.flutter.plugin.platform.SingleViewPresentation$PresentationState -> io.flutter.a.c.f$c:
    io.flutter.plugin.platform.PlatformView mView -> a
    io.flutter.plugin.platform.SingleViewPresentation$WindowManagerHandler mWindowManagerHandler -> b
    io.flutter.plugin.platform.SingleViewPresentation$FakeWindowViewGroup mFakeWindowRootView -> c
    io.flutter.plugin.platform.SingleViewPresentation$FakeWindowViewGroup access$000(io.flutter.plugin.platform.SingleViewPresentation$PresentationState) -> a
    io.flutter.plugin.platform.SingleViewPresentation$FakeWindowViewGroup access$002(io.flutter.plugin.platform.SingleViewPresentation$PresentationState,io.flutter.plugin.platform.SingleViewPresentation$FakeWindowViewGroup) -> a
    io.flutter.plugin.platform.SingleViewPresentation$WindowManagerHandler access$100(io.flutter.plugin.platform.SingleViewPresentation$PresentationState) -> b
    io.flutter.plugin.platform.SingleViewPresentation$WindowManagerHandler access$102(io.flutter.plugin.platform.SingleViewPresentation$PresentationState,io.flutter.plugin.platform.SingleViewPresentation$WindowManagerHandler) -> a
    io.flutter.plugin.platform.PlatformView access$200(io.flutter.plugin.platform.SingleViewPresentation$PresentationState) -> c
    io.flutter.plugin.platform.PlatformView access$202(io.flutter.plugin.platform.SingleViewPresentation$PresentationState,io.flutter.plugin.platform.PlatformView) -> a
io.flutter.plugin.platform.SingleViewPresentation$WindowManagerHandler -> io.flutter.a.c.f$d:
    android.view.WindowManager mDelegate -> b
    io.flutter.plugin.platform.SingleViewPresentation$FakeWindowViewGroup mFakeWindowRootView -> a
    void <init>(android.view.WindowManager,io.flutter.plugin.platform.SingleViewPresentation$FakeWindowViewGroup) -> <init>
    android.view.WindowManager getWindowManager() -> a
    java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[]) -> invoke
    void addView(java.lang.Object[]) -> a
    void removeView(java.lang.Object[]) -> b
    void removeViewImmediate(java.lang.Object[]) -> c
    void updateViewLayout(java.lang.Object[]) -> d
io.flutter.plugin.platform.VirtualDisplayController -> io.flutter.a.c.g:
    io.flutter.view.TextureRegistry$SurfaceTextureEntry mTextureEntry -> a
    android.hardware.display.VirtualDisplay mVirtualDisplay -> b
    io.flutter.plugin.platform.SingleViewPresentation mPresentation -> c
    void dispose() -> a
io.flutter.plugins.GeneratedPluginRegistrant -> io.flutter.b.a:
    void <init>() -> <init>
    void registerWith(io.flutter.plugin.common.PluginRegistry) -> a
    boolean alreadyRegisteredWith(io.flutter.plugin.common.PluginRegistry) -> b
io.flutter.util.PathUtils -> io.flutter.c.a:
    java.lang.String getFilesDir(android.content.Context) -> a
    java.lang.String getDataDirectory(android.content.Context) -> b
    java.lang.String getCacheDirectory(android.content.Context) -> c
io.flutter.util.Preconditions -> io.flutter.c.b:
    java.lang.Object checkNotNull(java.lang.Object) -> a
io.flutter.view.AccessibilityBridge -> io.flutter.view.a:
    java.util.Map mObjects -> c
    java.util.Map mCustomAccessibilityActions -> d
    io.flutter.view.FlutterView mOwner -> e
    boolean mAccessibilityEnabled -> f
    io.flutter.view.AccessibilityBridge$SemanticsObject mA11yFocusedObject -> g
    io.flutter.view.AccessibilityBridge$SemanticsObject mInputFocusedObject -> h
    io.flutter.view.AccessibilityBridge$SemanticsObject mHoveredObject -> i
    int previousRouteId -> j
    java.util.List previousRoutes -> k
    android.view.View mDecorView -> l
    java.lang.Integer mLastLeftFrameInset -> m
    io.flutter.plugin.common.BasicMessageChannel mFlutterAccessibilityChannel -> n
    int firstResourceId -> a
    boolean $assertionsDisabled -> b
    void <init>(io.flutter.view.FlutterView) -> <init>
    void setAccessibilityEnabled(boolean) -> a
    android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo(int) -> createAccessibilityNodeInfo
    boolean performAction(int,int,android.os.Bundle) -> performAction
    boolean performCursorMoveAction(io.flutter.view.AccessibilityBridge$SemanticsObject,int,android.os.Bundle,boolean) -> a
    android.view.accessibility.AccessibilityNodeInfo findFocus(int) -> findFocus
    io.flutter.view.AccessibilityBridge$SemanticsObject getRootObject() -> c
    void handleTouchExplorationExit() -> a
    void handleTouchExploration(float,float) -> a
    android.view.accessibility.AccessibilityEvent obtainAccessibilityEvent(int,int) -> a
    void sendAccessibilityEvent(int,int) -> b
    void sendAccessibilityEvent(android.view.accessibility.AccessibilityEvent) -> a
    void reset() -> b
    void <clinit>() -> <clinit>
io.flutter.view.AccessibilityBridge$Action -> io.flutter.view.a$a:
    io.flutter.view.AccessibilityBridge$Action TAP -> a
    io.flutter.view.AccessibilityBridge$Action LONG_PRESS -> b
    io.flutter.view.AccessibilityBridge$Action SCROLL_LEFT -> c
    io.flutter.view.AccessibilityBridge$Action SCROLL_RIGHT -> d
    io.flutter.view.AccessibilityBridge$Action SCROLL_UP -> e
    io.flutter.view.AccessibilityBridge$Action SCROLL_DOWN -> f
    io.flutter.view.AccessibilityBridge$Action INCREASE -> g
    io.flutter.view.AccessibilityBridge$Action DECREASE -> h
    io.flutter.view.AccessibilityBridge$Action SHOW_ON_SCREEN -> i
    io.flutter.view.AccessibilityBridge$Action MOVE_CURSOR_FORWARD_BY_CHARACTER -> j
    io.flutter.view.AccessibilityBridge$Action MOVE_CURSOR_BACKWARD_BY_CHARACTER -> k
    io.flutter.view.AccessibilityBridge$Action SET_SELECTION -> l
    io.flutter.view.AccessibilityBridge$Action COPY -> m
    io.flutter.view.AccessibilityBridge$Action CUT -> n
    io.flutter.view.AccessibilityBridge$Action PASTE -> o
    io.flutter.view.AccessibilityBridge$Action DID_GAIN_ACCESSIBILITY_FOCUS -> p
    io.flutter.view.AccessibilityBridge$Action DID_LOSE_ACCESSIBILITY_FOCUS -> q
    io.flutter.view.AccessibilityBridge$Action CUSTOM_ACTION -> r
    io.flutter.view.AccessibilityBridge$Action DISMISS -> s
    io.flutter.view.AccessibilityBridge$Action MOVE_CURSOR_FORWARD_BY_WORD -> t
    io.flutter.view.AccessibilityBridge$Action MOVE_CURSOR_BACKWARD_BY_WORD -> u
    int value -> v
    io.flutter.view.AccessibilityBridge$Action[] $VALUES -> w
    io.flutter.view.AccessibilityBridge$Action[] values() -> values
    io.flutter.view.AccessibilityBridge$Action valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int) -> <init>
    void <clinit>() -> <clinit>
io.flutter.view.AccessibilityBridge$CustomAccessibilityAction -> io.flutter.view.a$b:
    int resourceId -> a
    int id -> b
    java.lang.String label -> c
    java.lang.String hint -> d
io.flutter.view.AccessibilityBridge$Flag -> io.flutter.view.a$c:
    io.flutter.view.AccessibilityBridge$Flag HAS_CHECKED_STATE -> a
    io.flutter.view.AccessibilityBridge$Flag IS_CHECKED -> b
    io.flutter.view.AccessibilityBridge$Flag IS_SELECTED -> c
    io.flutter.view.AccessibilityBridge$Flag IS_BUTTON -> d
    io.flutter.view.AccessibilityBridge$Flag IS_TEXT_FIELD -> e
    io.flutter.view.AccessibilityBridge$Flag IS_FOCUSED -> f
    io.flutter.view.AccessibilityBridge$Flag HAS_ENABLED_STATE -> g
    io.flutter.view.AccessibilityBridge$Flag IS_ENABLED -> h
    io.flutter.view.AccessibilityBridge$Flag IS_IN_MUTUALLY_EXCLUSIVE_GROUP -> i
    io.flutter.view.AccessibilityBridge$Flag IS_HEADER -> j
    io.flutter.view.AccessibilityBridge$Flag IS_OBSCURED -> k
    io.flutter.view.AccessibilityBridge$Flag SCOPES_ROUTE -> l
    io.flutter.view.AccessibilityBridge$Flag NAMES_ROUTE -> m
    io.flutter.view.AccessibilityBridge$Flag IS_HIDDEN -> n
    io.flutter.view.AccessibilityBridge$Flag IS_IMAGE -> o
    io.flutter.view.AccessibilityBridge$Flag IS_LIVE_REGION -> p
    io.flutter.view.AccessibilityBridge$Flag HAS_TOGGLED_STATE -> q
    io.flutter.view.AccessibilityBridge$Flag IS_TOGGLED -> r
    io.flutter.view.AccessibilityBridge$Flag HAS_IMPLICIT_SCROLLING -> s
    int value -> t
    io.flutter.view.AccessibilityBridge$Flag[] $VALUES -> u
    io.flutter.view.AccessibilityBridge$Flag[] values() -> values
    io.flutter.view.AccessibilityBridge$Flag valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int) -> <init>
    void <clinit>() -> <clinit>
io.flutter.view.AccessibilityBridge$SemanticsObject -> io.flutter.view.a$d:
    int id -> a
    int flags -> b
    int actions -> c
    int textSelectionBase -> d
    int textSelectionExtent -> e
    java.lang.String label -> f
    java.lang.String value -> g
    java.lang.String increasedValue -> h
    java.lang.String decreasedValue -> i
    java.lang.String hint -> j
    float left -> r
    float top -> s
    float right -> t
    float bottom -> u
    float[] transform -> v
    io.flutter.view.AccessibilityBridge$SemanticsObject parent -> k
    java.util.List childrenInTraversalOrder -> l
    java.util.List childrenInHitTestOrder -> m
    java.util.List customAccessibilityActions -> n
    io.flutter.view.AccessibilityBridge$CustomAccessibilityAction onTapOverride -> o
    io.flutter.view.AccessibilityBridge$CustomAccessibilityAction onLongPressOverride -> p
    boolean inverseTransformDirty -> w
    float[] inverseTransform -> x
    boolean globalGeometryDirty -> y
    android.graphics.Rect globalRect -> z
    boolean $assertionsDisabled -> q
    boolean hasAction(io.flutter.view.AccessibilityBridge$Action) -> a
    boolean hasFlag(io.flutter.view.AccessibilityBridge$Flag) -> a
    void ensureInverseTransform() -> c
    android.graphics.Rect getGlobalRect() -> a
    io.flutter.view.AccessibilityBridge$SemanticsObject hitTest(float[]) -> a
    boolean isFocusable() -> b
    java.lang.String getValueLabelHint() -> d
    java.lang.String access$000(io.flutter.view.AccessibilityBridge$SemanticsObject) -> a
    void <clinit>() -> <clinit>
io.flutter.view.FlutterMain -> io.flutter.view.FlutterMain:
    java.lang.String PUBLIC_AOT_AOT_SHARED_LIBRARY_PATH -> a
    java.lang.String PUBLIC_AOT_VM_SNAPSHOT_DATA_KEY -> b
    java.lang.String PUBLIC_AOT_VM_SNAPSHOT_INSTR_KEY -> c
    java.lang.String PUBLIC_AOT_ISOLATE_SNAPSHOT_DATA_KEY -> d
    java.lang.String PUBLIC_AOT_ISOLATE_SNAPSHOT_INSTR_KEY -> e
    java.lang.String PUBLIC_FLX_KEY -> f
    java.lang.String PUBLIC_FLUTTER_ASSETS_DIR_KEY -> g
    java.lang.String sAotSharedLibraryPath -> h
    java.lang.String sAotVmSnapshotData -> i
    java.lang.String sAotVmSnapshotInstr -> j
    java.lang.String sAotIsolateSnapshotData -> k
    java.lang.String sAotIsolateSnapshotInstr -> l
    java.lang.String sFlx -> m
    java.lang.String sFlutterAssetsDir -> n
    boolean sInitialized -> o
    io.flutter.view.ResourceExtractor sResourceExtractor -> p
    boolean sIsPrecompiledAsBlobs -> q
    boolean sIsPrecompiledAsSharedLibrary -> r
    io.flutter.view.FlutterMain$Settings sSettings -> s
    java.lang.String sIcuDataPath -> t
    void <init>() -> <init>
    java.lang.String fromFlutterAssets(java.lang.String) -> a
    void startInitialization(android.content.Context) -> a
    void startInitialization(android.content.Context,io.flutter.view.FlutterMain$Settings) -> a
    void ensureInitializationComplete(android.content.Context,java.lang.String[]) -> a
    void nativeInit(android.content.Context,java.lang.String[],java.lang.String,java.lang.String,java.lang.String) -> nativeInit
    void nativeRecordStartTimestamp(long) -> nativeRecordStartTimestamp
    void initConfig(android.content.Context) -> c
    void initResources(android.content.Context) -> d
    java.util.Set listAssets(android.content.Context,java.lang.String) -> a
    void initAot(android.content.Context) -> e
    java.lang.String findAppBundlePath(android.content.Context) -> b
    void <clinit>() -> <clinit>
io.flutter.view.FlutterMain$ImmutableSetBuilder -> io.flutter.view.FlutterMain$a:
    java.util.HashSet set -> a
    io.flutter.view.FlutterMain$ImmutableSetBuilder newInstance() -> a
    void <init>() -> <init>
    io.flutter.view.FlutterMain$ImmutableSetBuilder add(java.lang.Object[]) -> a
    java.util.Set build() -> b
io.flutter.view.FlutterMain$Settings -> io.flutter.view.FlutterMain$b:
    java.lang.String logTag -> a
    void <init>() -> <init>
    java.lang.String getLogTag() -> a
io.flutter.view.FlutterNativeView -> io.flutter.view.FlutterNativeView:
    java.util.Map mMessageHandlers -> a
    int mNextReplyId -> b
    java.util.Map mPendingReplies -> c
    io.flutter.app.FlutterPluginRegistry mPluginRegistry -> d
    long mNativePlatformView -> e
    io.flutter.view.FlutterView mFlutterView -> f
    android.content.Context mContext -> g
    boolean applicationIsRunning -> h
    void <init>(android.content.Context) -> <init>
    void <init>(android.content.Context,boolean) -> <init>
    void detach() -> a
    void destroy() -> b
    io.flutter.app.FlutterPluginRegistry getPluginRegistry() -> c
    void attachViewAndActivity(io.flutter.view.FlutterView,android.app.Activity) -> a
    boolean isAttached() -> d
    long get() -> e
    void assertAttached() -> f
    void runFromBundle(io.flutter.view.FlutterRunArguments) -> a
    void runFromBundleInternal(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> a
    boolean isApplicationRunning() -> g
    void send(java.lang.String,java.nio.ByteBuffer,io.flutter.plugin.common.BinaryMessenger$BinaryReply) -> a
    void setMessageHandler(java.lang.String,io.flutter.plugin.common.BinaryMessenger$BinaryMessageHandler) -> a
    void attach(io.flutter.view.FlutterNativeView,boolean) -> a
    long nativeAttach(io.flutter.view.FlutterNativeView,boolean) -> nativeAttach
    void nativeDestroy(long) -> nativeDestroy
    void nativeDetach(long) -> nativeDetach
    void nativeRunBundleAndSnapshotFromLibrary(long,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.content.res.AssetManager) -> nativeRunBundleAndSnapshotFromLibrary
    void nativeDispatchEmptyPlatformMessage(long,java.lang.String,int) -> nativeDispatchEmptyPlatformMessage
    void nativeDispatchPlatformMessage(long,java.lang.String,java.nio.ByteBuffer,int,int) -> nativeDispatchPlatformMessage
io.flutter.view.FlutterRunArguments -> io.flutter.view.b:
    java.lang.String bundlePath -> a
    java.lang.String entrypoint -> b
    java.lang.String libraryPath -> c
    java.lang.String defaultPath -> d
    void <init>() -> <init>
io.flutter.view.FlutterView -> io.flutter.view.FlutterView:
    android.view.inputmethod.InputMethodManager mImm -> b
    io.flutter.plugin.editing.TextInputPlugin mTextInputPlugin -> c
    android.view.SurfaceHolder$Callback mSurfaceCallback -> d
    io.flutter.view.FlutterView$ViewportMetrics mMetrics -> e
    android.view.accessibility.AccessibilityManager mAccessibilityManager -> f
    io.flutter.plugin.common.MethodChannel mFlutterLocalizationChannel -> g
    io.flutter.plugin.common.MethodChannel mFlutterNavigationChannel -> h
    io.flutter.plugin.common.BasicMessageChannel mFlutterKeyEventChannel -> i
    io.flutter.plugin.common.BasicMessageChannel mFlutterLifecycleChannel -> j
    io.flutter.plugin.common.BasicMessageChannel mFlutterSystemChannel -> k
    io.flutter.plugin.common.BasicMessageChannel mFlutterSettingsChannel -> l
    java.util.List mActivityLifecycleListeners -> m
    java.util.List mFirstFrameListeners -> n
    java.util.concurrent.atomic.AtomicLong nextTextureId -> o
    io.flutter.view.FlutterNativeView mNativeView -> p
    io.flutter.view.FlutterView$AnimationScaleObserver mAnimationScaleObserver -> q
    boolean mIsSoftwareRenderingEnabled -> r
    android.view.inputmethod.InputConnection mLastInputConnection -> s
    boolean mAccessibilityEnabled -> t
    boolean mTouchExplorationEnabled -> u
    int mAccessibilityFeatureFlags -> v
    io.flutter.view.FlutterView$TouchExplorationListener mTouchExplorationListener -> w
    io.flutter.view.AccessibilityBridge mAccessibilityNodeProvider -> x
    boolean $assertionsDisabled -> a
    void <init>(android.content.Context,android.util.AttributeSet,io.flutter.view.FlutterNativeView) -> <init>
    void encodeKeyEvent(android.view.KeyEvent,java.util.Map) -> a
    boolean onKeyUp(int,android.view.KeyEvent) -> onKeyUp
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    io.flutter.view.FlutterNativeView getFlutterNativeView() -> getFlutterNativeView
    io.flutter.app.FlutterPluginRegistry getPluginRegistry() -> getPluginRegistry
    void addActivityLifecycleListener(io.flutter.plugin.common.ActivityLifecycleListener) -> a
    void onStart() -> a
    void onPause() -> b
    void onPostResume() -> c
    void onStop() -> d
    void onMemoryPressure() -> e
    void addFirstFrameListener(io.flutter.view.FlutterView$FirstFrameListener) -> a
    void setInitialRoute(java.lang.String) -> setInitialRoute
    void popRoute() -> f
    void setUserSettings() -> m
    void setLocales(android.content.res.Configuration) -> setLocales
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    float getDevicePixelRatio() -> getDevicePixelRatio
    io.flutter.view.FlutterNativeView detach() -> g
    void destroy() -> h
    android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo) -> onCreateInputConnection
    int getPointerChangeForAction(int) -> a
    int getPointerDeviceTypeForToolType(int) -> b
    void addPointerForIndex(android.view.MotionEvent,int,int,int,java.nio.ByteBuffer) -> a
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    boolean onHoverEvent(android.view.MotionEvent) -> onHoverEvent
    void onSizeChanged(int,int,int,int) -> onSizeChanged
    io.flutter.view.FlutterView$ZeroSides calculateShouldZeroSides() -> i
    int calculateBottomKeyboardInset(android.view.WindowInsets) -> a
    android.view.WindowInsets onApplyWindowInsets(android.view.WindowInsets) -> onApplyWindowInsets
    boolean fitSystemWindows(android.graphics.Rect) -> fitSystemWindows
    boolean isAttached() -> n
    void assertAttached() -> j
    void preRun() -> o
    void postRun() -> p
    void runFromBundle(io.flutter.view.FlutterRunArguments) -> a
    android.graphics.Bitmap getBitmap() -> getBitmap
    void nativeSurfaceCreated(long,android.view.Surface) -> nativeSurfaceCreated
    void nativeSurfaceChanged(long,int,int) -> nativeSurfaceChanged
    void nativeSurfaceDestroyed(long) -> nativeSurfaceDestroyed
    void nativeSetViewportMetrics(long,float,int,int,int,int,int,int,int,int,int,int) -> nativeSetViewportMetrics
    android.graphics.Bitmap nativeGetBitmap(long) -> nativeGetBitmap
    void nativeDispatchPointerDataPacket(long,java.nio.ByteBuffer,int) -> nativeDispatchPointerDataPacket
    void nativeDispatchSemanticsAction(long,int,int,java.nio.ByteBuffer,int) -> nativeDispatchSemanticsAction
    void nativeSetSemanticsEnabled(long,boolean) -> nativeSetSemanticsEnabled
    void nativeSetAccessibilityFeatures(long,int) -> nativeSetAccessibilityFeatures
    boolean nativeGetIsSoftwareRenderingEnabled() -> nativeGetIsSoftwareRenderingEnabled
    void updateViewportMetrics() -> q
    void dispatchSemanticsAction(int,io.flutter.view.AccessibilityBridge$Action) -> a
    void dispatchSemanticsAction(int,io.flutter.view.AccessibilityBridge$Action,java.lang.Object) -> a
    void onAttachedToWindow() -> onAttachedToWindow
    void updateAccessibilityFeatures() -> r
    void onDetachedFromWindow() -> onDetachedFromWindow
    void resetWillNotDraw() -> s
    void onAccessibilityStateChanged(boolean) -> onAccessibilityStateChanged
    android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider() -> getAccessibilityNodeProvider
    void ensureAccessibilityEnabled() -> k
    void resetAccessibilityTree() -> l
    boolean handleAccessibilityHoverEvent(android.view.MotionEvent) -> a
    void send(java.lang.String,java.nio.ByteBuffer,io.flutter.plugin.common.BinaryMessenger$BinaryReply) -> a
    void setMessageHandler(java.lang.String,io.flutter.plugin.common.BinaryMessenger$BinaryMessageHandler) -> a
    io.flutter.view.FlutterNativeView access$000(io.flutter.view.FlutterView) -> a
    void access$100(long,android.view.Surface) -> a
    void access$200(long,int,int) -> a
    void access$300(long) -> a
    int access$400(io.flutter.view.FlutterView) -> b
    int access$402(io.flutter.view.FlutterView,int) -> a
    void access$500(long,int) -> a
    boolean access$602(io.flutter.view.FlutterView,boolean) -> a
    io.flutter.view.AccessibilityBridge access$700(io.flutter.view.FlutterView) -> c
    void access$800(io.flutter.view.FlutterView) -> d
    void <clinit>() -> <clinit>
io.flutter.view.FlutterView$1 -> io.flutter.view.FlutterView$1:
    io.flutter.view.FlutterView this$0 -> a
    void <init>(io.flutter.view.FlutterView) -> <init>
    void surfaceCreated(android.view.SurfaceHolder) -> surfaceCreated
    void surfaceChanged(android.view.SurfaceHolder,int,int,int) -> surfaceChanged
    void surfaceDestroyed(android.view.SurfaceHolder) -> surfaceDestroyed
io.flutter.view.FlutterView$AccessibilityFeature -> io.flutter.view.FlutterView$a:
    io.flutter.view.FlutterView$AccessibilityFeature ACCESSIBLE_NAVIGATION -> a
    io.flutter.view.FlutterView$AccessibilityFeature INVERT_COLORS -> b
    io.flutter.view.FlutterView$AccessibilityFeature DISABLE_ANIMATIONS -> c
    int value -> d
    io.flutter.view.FlutterView$AccessibilityFeature[] $VALUES -> e
    io.flutter.view.FlutterView$AccessibilityFeature[] values() -> values
    io.flutter.view.FlutterView$AccessibilityFeature valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int) -> <init>
    void <clinit>() -> <clinit>
io.flutter.view.FlutterView$AnimationScaleObserver -> io.flutter.view.FlutterView$b:
    io.flutter.view.FlutterView this$0 -> a
    void <init>(io.flutter.view.FlutterView,android.os.Handler) -> <init>
    void onChange(boolean) -> onChange
    void onChange(boolean,android.net.Uri) -> onChange
io.flutter.view.FlutterView$FirstFrameListener -> io.flutter.view.FlutterView$c:
io.flutter.view.FlutterView$Provider -> io.flutter.view.FlutterView$d:
    io.flutter.view.FlutterView getFlutterView() -> a
io.flutter.view.FlutterView$TouchExplorationListener -> io.flutter.view.FlutterView$e:
    io.flutter.view.FlutterView this$0 -> a
    void <init>(io.flutter.view.FlutterView) -> <init>
    void onTouchExplorationStateChanged(boolean) -> onTouchExplorationStateChanged
io.flutter.view.FlutterView$ViewportMetrics -> io.flutter.view.FlutterView$f:
    float devicePixelRatio -> a
    int physicalWidth -> b
    int physicalHeight -> c
    int physicalPaddingTop -> d
    int physicalPaddingRight -> e
    int physicalPaddingBottom -> f
    int physicalPaddingLeft -> g
    int physicalViewInsetTop -> h
    int physicalViewInsetRight -> i
    int physicalViewInsetBottom -> j
    int physicalViewInsetLeft -> k
    void <init>() -> <init>
io.flutter.view.FlutterView$ZeroSides -> io.flutter.view.FlutterView$g:
    io.flutter.view.FlutterView$ZeroSides NONE -> a
    io.flutter.view.FlutterView$ZeroSides LEFT -> b
    io.flutter.view.FlutterView$ZeroSides RIGHT -> c
    io.flutter.view.FlutterView$ZeroSides BOTH -> d
    io.flutter.view.FlutterView$ZeroSides[] $VALUES -> e
    io.flutter.view.FlutterView$ZeroSides[] values() -> values
    io.flutter.view.FlutterView$ZeroSides valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
io.flutter.view.ResourceCleaner -> io.flutter.view.c:
    android.content.Context mContext -> a
    void <init>(android.content.Context) -> <init>
    void start() -> a
io.flutter.view.ResourceCleaner$1 -> io.flutter.view.c$1:
    io.flutter.view.ResourceCleaner this$0 -> a
    void <init>(io.flutter.view.ResourceCleaner) -> <init>
    boolean accept(java.io.File,java.lang.String) -> accept
io.flutter.view.ResourceCleaner$2 -> io.flutter.view.c$2:
    io.flutter.view.ResourceCleaner$CleanTask val$task -> a
    io.flutter.view.ResourceCleaner this$0 -> b
    void <init>(io.flutter.view.ResourceCleaner,io.flutter.view.ResourceCleaner$CleanTask) -> <init>
    void run() -> run
io.flutter.view.ResourceCleaner$CleanTask -> io.flutter.view.c$a:
    java.io.File[] mFilesToDelete -> b
    io.flutter.view.ResourceCleaner this$0 -> a
    void <init>(io.flutter.view.ResourceCleaner,java.io.File[]) -> <init>
    boolean hasFilesToDelete() -> a
    java.lang.Void doInBackground(java.lang.Void[]) -> a
    void deleteRecursively(java.io.File) -> a
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
io.flutter.view.ResourceExtractor -> io.flutter.view.d:
    android.content.Context mContext -> b
    java.util.HashSet mResources -> c
    io.flutter.view.ResourceExtractor$ExtractTask mExtractTask -> d
    boolean $assertionsDisabled -> a
    void <init>(android.content.Context) -> <init>
    io.flutter.view.ResourceExtractor addResource(java.lang.String) -> a
    io.flutter.view.ResourceExtractor start() -> a
    void waitForCompletion() -> b
    java.lang.String[] getExistingTimestamps(java.io.File) -> a
    void deleteFiles() -> c
    android.content.Context access$000(io.flutter.view.ResourceExtractor) -> a
    void access$100(io.flutter.view.ResourceExtractor) -> b
    java.util.HashSet access$200(io.flutter.view.ResourceExtractor) -> c
    java.lang.String[] access$300(io.flutter.view.ResourceExtractor,java.io.File) -> a
    void <clinit>() -> <clinit>
io.flutter.view.ResourceExtractor$1 -> io.flutter.view.d$1:
    io.flutter.view.ResourceExtractor this$0 -> a
    void <init>(io.flutter.view.ResourceExtractor) -> <init>
    boolean accept(java.io.File,java.lang.String) -> accept
io.flutter.view.ResourceExtractor$ExtractTask -> io.flutter.view.d$a:
    io.flutter.view.ResourceExtractor this$0 -> a
    void <init>(io.flutter.view.ResourceExtractor) -> <init>
    void extractResources() -> a
    java.lang.String checkTimestamp(java.io.File) -> a
    java.lang.Void doInBackground(java.lang.Void[]) -> a
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
io.flutter.view.TextureRegistry -> io.flutter.view.e:
io.flutter.view.TextureRegistry$SurfaceTextureEntry -> io.flutter.view.e$a:
    void release() -> a
io.flutter.view.VsyncWaiter -> io.flutter.view.f:
    long refreshPeriodNanos -> a
    void <clinit>() -> <clinit>
kotlin.TypeCastException -> a.a:
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
kotlin.UninitializedPropertyAccessException -> a.b:
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
kotlin.jvm.internal.Intrinsics -> a.a.a.a:
    void <init>() -> <init>
    void throwUninitializedProperty(java.lang.String) -> a
    void throwUninitializedPropertyAccessException(java.lang.String) -> b
    java.lang.Throwable sanitizeStackTrace(java.lang.Throwable) -> a
    java.lang.Throwable sanitizeStackTrace(java.lang.Throwable,java.lang.String) -> a
